/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mx.att.digital.productorderingmanagement.adapter.in.web;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import mx.att.digital.productorderingmanagement.interfaces.dto.*;
import mx.att.digital.productorderingmanagement.interfaces.dto.Error;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "notification listeners (client side)", description = "the notification listeners (client side) API")
public interface ListenerApi {

    default ListenerApiDelegate getDelegate() {
        return new ListenerApiDelegate() {};
    }

    /**
     * POST /listener/cancelProductOrderCreateEvent : Client listener for entity CancelProductOrderCreateEvent
     * Example of a client listener for receiving the notification CancelProductOrderCreateEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listenToCancelProductOrderCreateEvent",
        summary = "Client listener for entity CancelProductOrderCreateEvent",
        description = "Example of a client listener for receiving the notification CancelProductOrderCreateEvent",
        tags = { "notification listeners (client side)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/cancelProductOrderCreateEvent",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    
    default Mono<ResponseEntity<EventSubscription>> listenToCancelProductOrderCreateEvent(
        @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody Mono<CancelProductOrderCreateEvent> data,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listenToCancelProductOrderCreateEvent(data, exchange);
    }


    /**
     * POST /listener/cancelProductOrderInformationRequiredEvent : Client listener for entity CancelProductOrderInformationRequiredEvent
     * Example of a client listener for receiving the notification CancelProductOrderInformationRequiredEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listenToCancelProductOrderInformationRequiredEvent",
        summary = "Client listener for entity CancelProductOrderInformationRequiredEvent",
        description = "Example of a client listener for receiving the notification CancelProductOrderInformationRequiredEvent",
        tags = { "notification listeners (client side)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/cancelProductOrderInformationRequiredEvent",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    
    default Mono<ResponseEntity<EventSubscription>> listenToCancelProductOrderInformationRequiredEvent(
        @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody Mono<CancelProductOrderInformationRequiredEvent> data,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listenToCancelProductOrderInformationRequiredEvent(data, exchange);
    }


    /**
     * POST /listener/cancelProductOrderStateChangeEvent : Client listener for entity CancelProductOrderStateChangeEvent
     * Example of a client listener for receiving the notification CancelProductOrderStateChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listenToCancelProductOrderStateChangeEvent",
        summary = "Client listener for entity CancelProductOrderStateChangeEvent",
        description = "Example of a client listener for receiving the notification CancelProductOrderStateChangeEvent",
        tags = { "notification listeners (client side)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/cancelProductOrderStateChangeEvent",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    
    default Mono<ResponseEntity<EventSubscription>> listenToCancelProductOrderStateChangeEvent(
        @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody Mono<CancelProductOrderStateChangeEvent> data,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listenToCancelProductOrderStateChangeEvent(data, exchange);
    }


    /**
     * POST /listener/productOrderAttributeValueChangeEvent : Client listener for entity ProductOrderAttributeValueChangeEvent
     * Example of a client listener for receiving the notification ProductOrderAttributeValueChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listenToProductOrderAttributeValueChangeEvent",
        summary = "Client listener for entity ProductOrderAttributeValueChangeEvent",
        description = "Example of a client listener for receiving the notification ProductOrderAttributeValueChangeEvent",
        tags = { "notification listeners (client side)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/productOrderAttributeValueChangeEvent",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    
    default Mono<ResponseEntity<EventSubscription>> listenToProductOrderAttributeValueChangeEvent(
        @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody Mono<ProductOrderAttributeValueChangeEvent> data,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listenToProductOrderAttributeValueChangeEvent(data, exchange);
    }


    /**
     * POST /listener/productOrderCreateEvent : Client listener for entity ProductOrderCreateEvent
     * Example of a client listener for receiving the notification ProductOrderCreateEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listenToProductOrderCreateEvent",
        summary = "Client listener for entity ProductOrderCreateEvent",
        description = "Example of a client listener for receiving the notification ProductOrderCreateEvent",
        tags = { "notification listeners (client side)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/productOrderCreateEvent",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    
    default Mono<ResponseEntity<EventSubscription>> listenToProductOrderCreateEvent(
        @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody Mono<ProductOrderCreateEvent> data,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listenToProductOrderCreateEvent(data, exchange);
    }


    /**
     * POST /listener/productOrderDeleteEvent : Client listener for entity ProductOrderDeleteEvent
     * Example of a client listener for receiving the notification ProductOrderDeleteEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listenToProductOrderDeleteEvent",
        summary = "Client listener for entity ProductOrderDeleteEvent",
        description = "Example of a client listener for receiving the notification ProductOrderDeleteEvent",
        tags = { "notification listeners (client side)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/productOrderDeleteEvent",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    
    default Mono<ResponseEntity<EventSubscription>> listenToProductOrderDeleteEvent(
        @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody Mono<ProductOrderDeleteEvent> data,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listenToProductOrderDeleteEvent(data, exchange);
    }


    /**
     * POST /listener/productOrderInformationRequiredEvent : Client listener for entity ProductOrderInformationRequiredEvent
     * Example of a client listener for receiving the notification ProductOrderInformationRequiredEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listenToProductOrderInformationRequiredEvent",
        summary = "Client listener for entity ProductOrderInformationRequiredEvent",
        description = "Example of a client listener for receiving the notification ProductOrderInformationRequiredEvent",
        tags = { "notification listeners (client side)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/productOrderInformationRequiredEvent",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    
    default Mono<ResponseEntity<EventSubscription>> listenToProductOrderInformationRequiredEvent(
        @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody Mono<ProductOrderInformationRequiredEvent> data,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listenToProductOrderInformationRequiredEvent(data, exchange);
    }


    /**
     * POST /listener/productOrderStateChangeEvent : Client listener for entity ProductOrderStateChangeEvent
     * Example of a client listener for receiving the notification ProductOrderStateChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listenToProductOrderStateChangeEvent",
        summary = "Client listener for entity ProductOrderStateChangeEvent",
        description = "Example of a client listener for receiving the notification ProductOrderStateChangeEvent",
        tags = { "notification listeners (client side)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/productOrderStateChangeEvent",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    
    default Mono<ResponseEntity<EventSubscription>> listenToProductOrderStateChangeEvent(
        @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody Mono<ProductOrderStateChangeEvent> data,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listenToProductOrderStateChangeEvent(data, exchange);
    }

}
